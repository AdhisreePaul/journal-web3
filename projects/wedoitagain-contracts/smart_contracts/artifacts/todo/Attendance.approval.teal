#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "present"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/todo/contract.algo.ts:4
    // present = GlobalState<uint64>({  initialValue: 0 })
    bytec_0 // "present"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/todo/contract.algo.ts:3
    // export class Attendance extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytes 0x632a29fb // method "markPresent()uint64"
    txna ApplicationArgs 0
    match main_markPresent_route@5

main_after_if_else@12:
    // smart_contracts/todo/contract.algo.ts:3
    // export class Attendance extends Contract {
    intc_0 // 0
    return

main_markPresent_route@5:
    // smart_contracts/todo/contract.algo.ts:6
    // markPresent(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub markPresent
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@8:
    // smart_contracts/todo/contract.algo.ts:3
    // export class Attendance extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/todo/contract.algo.ts::Attendance.markPresent() -> uint64:
markPresent:
    // smart_contracts/todo/contract.algo.ts:4
    // present = GlobalState<uint64>({  initialValue: 0 })
    intc_0 // 0
    bytec_0 // "present"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/todo/contract.algo.ts:7
    // this.present.value = this.present.value + 1
    intc_1 // 1
    +
    // smart_contracts/todo/contract.algo.ts:4
    // present = GlobalState<uint64>({  initialValue: 0 })
    bytec_0 // "present"
    // smart_contracts/todo/contract.algo.ts:7
    // this.present.value = this.present.value + 1
    swap
    app_global_put
    // smart_contracts/todo/contract.algo.ts:4
    // present = GlobalState<uint64>({  initialValue: 0 })
    intc_0 // 0
    bytec_0 // "present"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/todo/contract.algo.ts:8
    // return this.present.value
    retsub
